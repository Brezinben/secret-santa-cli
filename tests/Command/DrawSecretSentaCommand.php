<?php

namespace App\Tests\Command;

use App\Repository\UserRepository;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Bundle\FrameworkBundle\Test\MailerAssertionsTrait;
use Symfony\Component\Console\Tester\CommandTester;

class DrawSecretSentaCommand extends KernelTestCase
{
    use MailerAssertionsTrait;
    const DRAW_COMMAND = 'app:draw-secret-senta';
    private UserRepository $userRepository;
    private Application $application;


    public function truncateUsers(): void
    {
        $this->userRepository->createQueryBuilder('u')->delete()->getQuery()->execute();
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        //  You must set the KERNEL_CLASS environment variable to the fully-qualified class name of your Kernel
        $kernel = self::bootKernel();
        $this->application = new Application($kernel);
        $this->userRepository = $this->createMock(UserRepository::class);
    }

    public function testExecute()
    {
        $this->truncateUsers();
        $command = $this->application->find(self::DRAW_COMMAND);
        $commandTester = new CommandTester($command);
        $commandTester->execute([
            '--users' => 'TONIA,tonia@example.net|Prasert,prasert@example.NET',
        ]);

        $commandTester->assertCommandIsSuccessful();
        // assert two users are created
        $this->assertCount(2, $this->userRepository->count([]));
        // assert emails are in lowercase
        $user = $this->userRepository->findOneBy(['email' => 'prasert@example.net']);
        $this->assertNotNull($user);
        $this->assertEquals('Prasert', $user->getName());
        // the output of the command in the console
        $output = $commandTester->getDisplay();
        $this->assertStringContainsString('2 users', $output);

        // assert emails are sent
        $this->assertEmailCount(2);
        $email = $this->getMailerMessage();
        $this->assertEmailHasHeader($email, 'From', "santa.clause@example.com");
    }

    public function testExecuteWithInvalidEmail()
    {
        $tooLongEmail = "a" . str_repeat("a", 255) . "@gmail.com";
        $this->truncateUsers();
        $invalidValues = ['Tonia,tonia.mccombs', 't,' . $tooLongEmail, 't,'];
        foreach ($invalidValues as $invalidValue) {
            $command = $this->application->find(self::DRAW_COMMAND);
            $commandTester = new CommandTester($command);
            $commandTester->execute([
                '--users' => $invalidValue,
            ]);

            $this->assertTrue($commandTester->getStatusCode() === 2);
            // assert no user is created
            $this->assertCount(0, $this->userRepository->count([]));
        }
    }
}
